name: 构建 Docker镜像  # Actions名称，docker

on:  # 定义触发工作流的事件
  release:  # 当发布新的GitHub release时触发
    types: [ published ]  # 当发布新的GitHub release时触发
  workflow_dispatch:  # 手动触发
    inputs:  # 输入的参数
      tag:  # 输入的标签
        description: '构建的版本号'  # 手动触发时输入的标签描述
        required: true  # 必须输入
        default: 'latest'  # 默认标签为'test'

permissions:  # 工作流权限
  contents: read  # 工作流需要读取仓库内容的权限

# 可以有多个工作流,多个工作流依次运行
# 一个工作流运行由一个或多个作业组成，这些作业可以顺序或并行运行
jobs:  # 工作流作业
  image:  # 作业名称,唯一标识
    name: 从 Dockerfile 构建映像  # 工作流作业名称
    runs-on: ubuntu-latest  # 在最新的Ubuntu环境中运行
    steps:  # 工作流步骤

      # 检出代码
      - name: 检查代码是否在工作目录  # 步骤名称
        uses: actions/checkout@v4  # 引用流程
        # with:  # 参数
        #   fetch-depth: '0'  # 获取深度，0表示获取所有提交记录

      # 设置QEMU，用于构建多平台镜像
      - name: 设置 QEMU  # 步骤名称
        uses: docker/setup-qemu-action@v3  # 引用流程

      # 设置Docker Buildx，用于构建和推送多平台镜像
      - name: 设置 Docker Buildx  # 步骤名称
        uses: docker/setup-buildx-action@v3  # 引用流程

      # 获取当前日期（格式：年月日,如 20251009）
      - name: 获取当前日期
        id: get-date
        run: echo "::set-output name=date::$(date +%Y%m%d)"
        shell: bash

      # 获取镜像标签名称
      - name: 获取 Image Tag  # 步骤名称
        # 注意 | 后注释会有问题故放在这
        # x${{ github.event.inputs.tag }} == x""，-z "${{ github.event.inputs.tag }}"，-n "${{ github.event.inputs.tag }}" 均为判断是否为空
        # 如果提供了标签，则使用提供的标签
        # 否则使用当前日期作为标签
        run: |
          if [ x${{ github.event.inputs.tag }} == x"" ]; then
            echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=${{ steps.get-date.outputs.date }}" >> $GITHUB_ENV
          fi

      # 登录到Docker Hub
      - name: 登录 DockerHub  # 步骤名称
        uses: docker/login-action@v3  # 引用流程
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Docker Hub 用户名(需在secrets中配置)
          password: ${{ secrets.DOCKERHUB_PASSWORD }}  # Docker Hub Token(需在secrets中配置)

      # 构建并推送 iftop 镜像
      - name: 编译并推送 iftop 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_iftop
          platforms: linux/amd64,linux/386,linux/arm64/v8,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/riscv64,linux/s390x
          push: true
          tags: |
            918178/iftop:${{ env.TAG_NAME }}
            918178/iftop:latest

      # 构建并推送 nethogs 镜像
      - name: 编译并推送 nethogs 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_nethogs
          platforms: linux/amd64,linux/386,linux/arm64/v8,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/riscv64,linux/s390x
          push: true
          tags: |
            918178/nethogs:${{ env.TAG_NAME }}
            918178/nethogs:latest

      # 构建并推送 iftop-nethogs 镜像
      - name: 编译并推送 iftop-nethogs 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_iftop-nethogs
          platforms: linux/amd64,linux/386,linux/arm64/v8,linux/arm/v7,linux/arm/v6,linux/ppc64le,linux/riscv64,linux/s390x
          push: true
          tags: |
            918178/iftop-nethogs:${{ env.TAG_NAME }}
            918178/iftop-nethogs:latest
